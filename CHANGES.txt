Pythics Change Log
==================

VERSION 1.0.0
-------------

This is the first major public release of Pythics for several years, with
updates from the last public release including a port to Python3, Qt5, and 
Matplotlib 3. Almost all user code will have to be updated to be used with this
new version of Pythics, both because of the new Python version and the new 
consolidated Main control detailed in the changes below and in the help. Those
upgrading from the last public release should look at all changes since 
version 0.7.3.

Changes since the last private version include:

* Updated README for Python3 and other changes.

* Expanded Introduction in help.

* Updated description of use of arbitrary QWidgets in help.

* Updated and/or expanded help for the following Controls:
  Main, ChoiceBox, ChoiceButton, EventButton, FilePicker, Image, ImageButton,
  MetricNumBox, NumBox, RadioButtonBox, ScrollBar, and mpl.Canvas.


VERSION 0.8.2:
--------------

* Exceptions when loading a control are now only reported in red box shown in 
  place of control to decrease printed errors while loading.

* Fixed deadlock on shutdown that caused apps to be terminated abnormally and
  another problem that generated lots of reported errors on shutdown.

* Updated matplotlib import statements in mpl.py to match latest matplotlib API
  changes (tested with matplotlib 3.0).

* Updated EventButton help to demonstrate another use case: a button to stop a 
  fast-running user loop without requiring slow calls to the GUI. EventButtons
  use a relatively low-level multiprocessing.Event object for communicating a 
  button press, which is very fast compared to typical Pythics GUI calls.

* Added toggle=True functionality and separated out start_interval method in 
  EventButton to make it act as a Start/Stop button and added corresponding 
  examples in help.

* Updated and improved automatic formatting of functions in help to properly 
  show arguments.

* Updated toggle button size to match regular button size again.

* Renamed processes to 'parent' and 'child' to match naming convention of
  multiprocessing so reported errors are more consistent.


VERSION 0.8.1:
--------------

* Consolidated ScriptLoader, ParameterLoader, Import, FileDialog, InputDialog, 
  and MessageDialog into a new "Main" control to cut down on xml clutter. This 
  will necessitate changes in almost all Pythics apps. Note that some of the 
  methods of these controls have been renamed, and many parameters are now set 
  from Python instead of xml (see help and examples). Importing modules in the 
  GUI using Main.import_module() is particularly more convenient than in 
  previous versions.

* Fixed scrolling behavior when clicking on links so the anchor appears near
  the top of the display area, instead of the bottom. This was particularly 
  problematic in the Pythics help.

* Fixed bug in NumBox with integer values that made valueChanged signals get
  emitted as you were typing a value, instead of after pressing enter or 
  changing the focus.

* Removed file libinstrument.py from Pythics, since it was really just an 
  example that was never integrated with the rest of Pythics.


VERSION 0.8.0:
--------------

This version is a major modernizing of Pythics, with a port to current versions
of Python (3.7), Qt (5.9), and Matplotlib (3.0). The porting was completed 
based on an unreleased (and unposted on GitHub) version because I had made many 
other changes since the previous posted version.

* Ported to Python 3 (using 2to3 and scattered manual corrections). Python3 
  is now the only officially supported version.

* Ported to Pyside2/PyQt5 (using pyqt4topyqt5 and a few manual corrections). 
  Pyside (Qt4) and PyQt4 are no longer supported.

* Updated to work with Matplotlib 3.0.x, which required some changes to for 
  animated plots to redraw correctly when resizing.


VERSION 0.7.16:
---------------

* Updated Image control with display() method to display raw image data without
  requiring PIL/pillow. The old Image.image property has been deprecated.


VERSION 0.7.15:
---------------

* Updated Image control to match changes in PIL/pillow. tostring -> tobytes and
  fromstring -> frombytes.


VERSION 0.7.14:
---------------

* Added load_parameters and save_parameters methods to ParameterLoader control 
  to enable loading and saving parameter files from Python and updated help to 
  include this new functionality.


VERSION 0.7.13:
---------------

* Eliminated autoscaling in mpl.Plot2D.set_data() when rescale=False.


VERSION 0.7.12:
---------------

* Added new control opengl.ScopePlot for fast real-time plotting of data with
  an oscilloscope-like display. This simple plot can utilize hardware
  acceleration through OpenGL when available.

* Removed old qwt controls. Development of pyQwt has apparently been stopped
  for a while and other controls have made these unnecessary in pythics.


VERSION 0.7.11:
---------------

* Added font_weight parameter to TextBox to allow for bold fonts.

* Fixed bug in TextBox alignment.


VERSION 0.7.10:
---------------

* Fixed bugs in -a command line option.

* Added -w command line option to open a workspace at startup.

* Added -c command line option to run in "compact" mode, which hides close
  buttons on tabs and hides the status bar (this replaces the _SHOW_STATUS_BAR
  option in settings.py). This is intended to be used in stand-alone devices
  with the -w or -a command-line options.

* Eliminated deepcopy of attributes in html.py which caused problems with some
  versions of lxml.


VERSION 0.7.9:
--------------

* Fixed update bug in Knob prefix and suffix.

* Added _SHOW_STATUS_BAR option in settings.py to optionally hide the status
  bar to conserve screen space on small-screen devices. The default is False.

* Changed default window size to match Raspberry Pi touchscreen size (800x480).


VERSION 0.7.8:
--------------

* Fixed bugs in mpl.Plot2D delete method or when the name of a new plot item
  matched that of an existing plot item.

* Added precision and format parameters to Meter controls.

* Added prefix and suffix parameters to Knob controls.


VERSION 0.7.7:
--------------

* Added new properties to mpl.Plot2D

* Fixed broken Save As... dialog box for parameters.

* Fixed long-standing bug in auto-scaling of animated plots in mpl.Plot2D which
  missed needed autoscaling in cases where not not every update was redrawn


VERSION 0.7.6:
--------------

* Fixed bug in mpl.Plot2D that caused unnecessary full redraws in animated
  plots, slowing updates and causing flickering on some platforms.

* Updates to ODE_N_particles, root_finder, laplace, and logistic_map examples.


VERSION 0.7.5:
--------------

* NumBox and MetricNumBox now won't show up/down buttons if 'read_only'
  parameter is set to 'True'.

* Renamed FilePicker 'type' parameter to 'dialog_type' and changed the valid
  options to 'open_file', 'save_file', and 'directory' to avoid conflicts with
  built-in python functions.

* Fixed error in documentation of RadioButtonBox actions.

* Updated chart_recorder example to reflect current Pythics best coding
  practices.


VERSION 0.7.4:
--------------

This release fixes several bugs and adds some new features:

* New control: MetricNumBox. This control displays a numerical value (like a
  NumBox), but it also displays a unit. A metric prefix for the unit can be
  selected with a drop-down menu and the value adjusts accordingly. The value
  is always read out in the base unit (without any metric prefix).

* Added 'logging' parameter to TextIOBox to speed up display of the results of
  a Python logger. If logging=True, TextIOBox uses QTextEdit.append() for
  TextIOBox.write(), which is much faster than the original version which
  updates the full text with any change.

* Fixed bug in html.py that could cause strange behavior if a parameter
  string matched a local variable name.

* Fixed broken printing when using PySide.

* Improved clarity of printing by first drawing to a QPicture, then printing
  the QPicture.

* Fixed problem with save dialog boxes when using PySide in Plot2D, Chart2D,
  FileDialog, and FilePicker and cleaned up code for open dialog box
  compatibility between PySide and PyQt.

* Fixed bug in command line options processing that made '-d' not work as an
  abbreviation for '--debug'.

* Fixed bug that left a thread (QueueWatcher) running when exiting Pythics,
  which was harmless but generated an error when using PySide.


VERSION 0.7.3:
--------------

This is primarily a bug-fix and minor new features release:

* Renamed pythics-run.py to start.py so it can be imported.

* Skip call to os.chdir in MainWindow.open_html_file if no directory is given.
  Also made minor changes to directory manipulations in start.py.

* When importing a module for an xml object, explicitly first search in pythics
  package, then look for globally available module (modified html.py).

* Added fixed_tabs option to MainWindow which can be used for starting pythics
  with a fixed set of open tabs which can not be changed through the GUI
  interface.


VERSION 0.7.2:
--------------

This release has several improvements:

* Added PySide compatibility. Pythics will now try to use PySide first, and
  will fall back to PyQt if PySide is not available. You can force Pythics to
  use PyQt by setting _TRY_PYSIDE = False in the pythics settings.py file.

* New controls: Knob and Meter. These are primarily to replace old qwt widgets,
  since the pyQwt bindings have not been maintained. The new controls require
  no external libraries, so they should be permanent additions to Pythics.

* Added 'font_size' parameter to NumBox, to change size of displayed values.

* Fixed scaling problems in Logistic map and Laplace examples. The
  animated=True mode in Plot2D could still use some optimization for images.


VERSION 0.7.1:
--------------

This is primarily a bug-fix release following the major changes in 0.7.0.

* Fixed errors caused by arbitrarily placed xml comments when using the lxml
  validating parser.

* Added resume method to the RunButton control to continue operation of a
  RunButton from within your run action after the stop button has been pressed
  but your run action has not returned. Also fixed a bug in RunButton.stop().

* In recognition of pythics having its own xml schema, renamed *.htm files to
  *.xml. Note that .htm or .html can also still be used as extensions.

* When using a RunButton, the delay time defaults to 0.0 if no argument is
  given. That is, "yield" alone is equivalent to "yield 0.0".

* Include schema and Jaxe config in installer and source package. They will be
  installed in the schema folder in the pythics installation.


VERSION 0.7.0:
--------------

Major changes:

* Pythics now includes and xml schema for validating .htm (or .xml) GUI
  description files. Pythics also now uses the lxml validating parser for
  loading GUI description files, if it is available. lxml provides far more
  informative error messages than ElementTree, the standard xml parser. If lxml
  is not available, Pythics will revert to ElementTree, which is part of the
  standard library.

* In addition to the xml schema file (called xhtml-pythics.xsd), the Pythics
  source distribution also includes a configuration file (html_config.xml) for
  the Jaxe xml editor. Jaxe provides a graphical editor which makes it much
  easier to construct GUI description (.htm) files, including a table editor,
  forms for entering objects, and validation of the whole file.

* <div> no longer allowed in <table> outside of <td>: In previous versions of
  Pythics, it was permissible to use <div> within a <table> but outside of a
  row to change the style of one or more rows. This was eliminated for
  compatibility to simplify the xml schema, to enable modification to the
  Pythics html renderer, and for compatibility with the Jaxe editor.

* New control RunButton:
  A toggle button which makes calls to a specially-constructed function, the
  action for the `run` signal, to create an action at regular intervals. The
  run function should use the python yield keyword, followed by the desired
  delay or interval between calls, in seconds. The required delay will occur at
  the yield call, and during that delay other functions in your python file can
  be called. Thus, the RunButton gives the functionality of using a Timer with
  the simplicity of writing a loop. See the ChartRecorder example for a
  demonstration.

Minor changes:

* Updated help and examples to match the xml changes and include the new
  RunButton control, as well as a few other minor changes.

* Modified rendering engine in html.py so xml is not altered during the
  loading process. This makes the representation of the xml in memory and in
  the file identical, which simplifies validation and may be useful in the
  future. As part of this change, error messages and error recovery after
  loading an invalid xml file have been greatly improved.

* Pythics now gives a warning, not an exception, if a control can't be loaded
  because a library is not available.

* When no tabs are open, the appropriate menu items are now disabled,
  instead of just doing nothing.

* In mpl.Chart2D, eliminated flicker at start of scrolling when
  fast_scroll=True.

* Made MessageDialog and InputDialog default to no label, so they will not
  appear in the GUI by default.

* Timer control changes: (1) Removed deprecated attribute 'interval'. (2) A
  RuntimeWarning will now be raised if Timer.start() is called when the Timer
  is already running or if Timer.stop() is called when the Timer is already
  stopped.


VERSION 0.6.2:
--------------

This release features one new control and several minor improvements:

* Changed parameter loading to use universal newlines so the same parameter
  files can be used across platforms.

* New control: InputDialog
  Pop up a dialog box to ask for a number, list item, or string.

* Fixed error in button help that made one of the examples fail.

* Fixed error in ImageButton that made setting ImageButton.value fail.

* Fixed help.py so help is generated even if some controls are broken.

* Changed font in help to Courier to improve readability of help tables.

* Fixed creation of shortcut on desktop by windows installer when used on
  Windows Vista and later by requesting elevated privileges during
  installation.


VERSION 0.6.1:
--------------

This release fixes several bugs that were left after major changes in the
previous release.

* Fixed error in qwt controls that was preventing parameter values from being
  set correctly from a program (self._block_signals() was mistyped as
  self.block_signals()).

* Fixed errors in documentation of matplotlib-based plots. The available
  actions were incorrectly described as e.g 'button_press_action' when they
  should have been e.g. 'button_press_event'. (Note: the action names are set
  by Qt and matplotlib, not by pythics.)

* Removed deprecated methods pop_event(), get_events_length(), and
  clear_events() from mpl.Plot2D control. They had never been properly
  documented and were broken in the last release. You should use
  mpl.Plot2D.events to access event information in mpl.Plot2D. Other mpl
  controls have a similar attribute. Further information was added to the
  documentation for mpl controls.

* Fixed error messages when using TextIOBox with a logger by adding a __len__
  method to TextIOBox which returns the number of lines.


VERSION 0.6.0:
--------------

This release includes a major rewrite and significant refactoring. Much of the
object proxy code was rewritten to generate proxies dynamically, building off
the design of the old mpl.Canvas object. This design change has significantly
simplified the coding of Pythics controls, decreased the total code in Pythics,
and made it possible to use standard pyQt controls directly in Pythics without
additional wrapping code. It is now also possible to use the html layout widget
independent of the rest of Pythics, or to use Pythics for inter-process
communication with layouts other than the html widget. Examples of these should
be included in future releases.

* New documentation available through the help menu within Pythics. This is now
  the primary documentation. The pdf manual is no longer available, but it may
  be rebuilt in the future.

* The way control actions are specified has changed for all controls. Instead of
  having multiple 'action' parameters, each control has an 'actions' dictionary
  with an entry for each action the control can trigger. See the help for each
  control for details.

* All parameters in html now pass through eval() in Python. If an exception is
  raised, the parameter is interpreted as a string. For safety, all strings
  passed as html parameters should now be double-quoted. For example:

  <object classid='FilePicker' id='file_picker' width='100%'>
    <param name='label' value="'Load file'"/>
    <param name='save' value='True'/>
    <param name='type' value="'open'"/>
  </object>

* Importing libraries in the GUI process for access in user processes is now
  handled with an Import control.

* mpl.Canvas no longer gives access to the matplotlib library as an attribute.
  Instead, use an Import control.

* Callbacks triggered in SubWindows now get sent all controls as arguments, not
  just the controls in the subwindow.

* ParameterLoader, ScriptLoader, GlobalNamespace, GlobalTrigger, and
  GlobalAction all default to showing no widget.

* mpl.Plot2D and mpl.Chart2D now have right-click menu to save figure to file.

* The previously deprecated mpl.MPLPlot control is no longer supported. Use
  mpl.Canvas instead.

* The examples directory was moved into the pythics directory and is now
  installed with the win32 installer as well as the .zip distribution.


VERSION 0.5.2:
--------------

* Fixed bug in mpl.Plot2D that made events unusable
  (although it is not documented yet anyway).

* Fixed bug in mpl.Plot2D.set_properties that made it unusable.

* Added 'c_limits' keyword argument to mpl.Plot2D new_colormesh, new_image, and
  set_properties methods to set the colormap limits.

* Properly remove old plot elements from Plot2D when they are deleted or
  replaced with new plot elements of the same name.

* Updated fitting example to allow plotting of initial guess.


VERSION 0.5.1:
--------------

* Fixed long-standing bug in pythics' use of QThread that could cause deadlocks
  in the GUI. This bug rarely impacted behavior on Windows XP or Linux, but
  caused frequent locking of the GUI under Windows 8. The elimination of this
  bug is the primary reason for this release.

* Catch unhandled exception which was raised when cancel was pressed after
  choosing File -> Open, File -> Open Workspace,
  File -> Save Workspace and File -> Save Workspace As...
  This was a long-standing issue, but it never caused a problem other than
  generating unnecessary error messages.

* Added is_set() method to EventButton which tells you whether the event has
  been triggered without having to give any wait time.


VERSION 0.5.0:
--------------

After a short 0.4.x series, this release number bumps up to 0.5.0 because of
incompatible changes which will minimize the burden of some old controls
(e.g. Plot) without removing the controls entirely. The pyQwt controls must now
be specified as e.g. qwt.Plot and are not loaded unless used. MPLPlot has been
replaced by mpl.Canvas and is now only available as deprecated.MPLPlot. See
details below. With this reorganization, add-on libraries (PyQwt and
matplotlib) are only loaded if a control they provide is used, making them
optional.

* New control mpl.Canvas:
  There is a new control, 'mpl.Canvas', which aims to wrap essentially the
  complete functionality of the matplotlib library. It is intended to replace
  MPLPlot, which will eventually be eliminated. Note that mpl.Chart2D and
  mpl.Plot2D are much easier to use and likely faster than mpl.Canvas, but they
  do not give access to the full capabilities of matplotlib. The mpl.Canvas
  control also automatically adapts to future changes in or additions to
  matplotlib. We anticipate that mpl.Canvas, mpl.Plot2D, mpl.Chart2D, and
  (future) mpl.Plot3D will be the long-term supported plotting controls.

* Code reorganization: MPLPlot moved to deprecated.MPLPlot
  Since mpl.Canvas is intended to replace MPLPlot, MPLPlot is now only
  available as deprecated.MPLPlot.

* Code reorganization: pyQwt-based controls moved to qwt.control_name
  This change was made because we no longer use pyQwt as our primary plotting
  engine. While pyQwt may fade away since it has no python3 port and it doesn't
  appear to be an active project, we will keep these controls around as long as
  it is practical. PyQwt is now considered optional and is only loaded if one
  of the qwt controls is used.

* Most code will need to be changed to run under Pythics 0.5.0. Here are the
  required substitutions of the control classid in your html files:
  MPLPlot -> deprecated.MPLPlot
  Plot2D -> mpl.Plot2D
  Chart2D -> mpl.Chart2D
  Dial -> qwt.Dial
  Gauge -> qwt.Gauge
  Knob -> qwt.Knob
  Slider -> qwt.Slider
  Chart -> qwt.Chart
  Plot -> qwt.Plot
  PointLinePlot -> qwt.PointLinePlot

* Updates to the documentation.


VERSION 0.4.1:
--------------

* Changes to Chart2D control:
  - New html parameter memory='circular' or 'growable' (now used in
    chart_recorder example). See Chart2D documentation.
  - Changed name of html parameter 'history' to 'length' to match the way the
    length of a circular or growable array is specified in Plot2D.

* Control proxies now copy the original call signatures of the control method
  call, instead of appearing as (*args, **kwargs). This gives clearer
  automatically generated documentation and better error detection in user
  code.

* Changed filenames and paths in pythics-run.py from ascii to UTF-8 encoding to
  handle files and paths with non-ascii characters.

* Changes in many controls:
  Convert all QStrings to UTF-8 before passing to user and removed explicit
  conversion of inputs to str by several controls. This should allow Pythics
  to handle unicode strings in most places.

* Added encoding identification string at the top of each pythics source file.

* Fixed warnings in ODE_particle_in_box and ODE_particle_in_circle simulation
  examples.

* Updated __init__.py file to make only pythics.lib imported if you use
  from pythics import *
  since that is the only file that a user would be intended to use.


VERSION 0.4.0:
--------------

* New plot control: Chart2D
  Chart2D, which uses matplotlib, is a replacement for the old Chart control,
  which used pyQwt. Its interface is a combination of Chart and Plot2D, so
  minor code changes are required to switch from Chart to Chart2D. Chart2D uses
  some tricks (like optionally hiding the axes labels while scrolling) to get
  reasonable plotting speed in most cases.
  NOTE: While there are no immediate plans to remove the old pyQwt plotting
  controls (Plot, Chart, PointLinePlot), new code should use the
  matplotlib-based plots: Plot2D and Chart2D.

* Changes to Plot2D control:
  - Implemented Polar line/scatter plots; set html parameter 'projection' to
    'polar' for polar plots.
  - Added colormesh plot item, which can be created with new_colormesh(). This
    is similar to matplotlib's pcolormesh(), and it works in polar projections.
  - Added save_figure() method to allow saving an image of the plot on command
    (an image can also be saved by right-clicking in in the plot in Plot2D and
    Chart2D).
  - Improvements to autoscale in animated plots.

* New control EventButton: A combination of a button and a timer that is
  particularly helpful for making a data acquisition loop that runs with a
  fixed time interval and can be interrupted at any time during the delay, so
  it works well for both short and long time steps. See the new chart_recorder
  example.

* New objects GrowableArray, CircularArray, AppendBuffer (in pythics.lib).
  These currently have minimal or no documentation.

* The chart_recorder example has been rewritten (the old one is renamed
  chart_recorder_old). The new version uses the new chart control (Chart2D), a
  GrowableArray to store data easily, and an EventButton to control the timing
  and stop the data acquisition loop. The end result is that the new version
  is significantly simpler and cleaner than the old version.

* Added a large number of new examples under examples -> simulations. These
  are simulations that I wrote for my computational physics class. They are
  nice demonstrations of Plot2D and of Pythics in general. ODE_N_particles is
  especially fun!

* Fixed draw glitches that occur when scrolling animated matplotlib widgets by
  forcing a full blit when the scroll bar is released.

* Removed old app.py file that should have been removed from the previous
  version. You should now start pythics with pythics-run.py.


VERSION 0.3.9:
--------------

* You can now start pythics from the command line as:
    Usage: pythics-run.py [options]
    Options:
      -h | --help    show help text then exit
      -a | --app     selects startup html file
      -v | --verbose selects verbose mode
      -d | --debug   selects debug mode
  The default logging level has now been changed to WARNING, so pythics prints
  fewer messages. Use the --verbose option to get the old level of
  logging (INFO) or --debug to get lots of debugging messages. This
  functionality is based on a patch submitted by Thomas Fechner.

* New plot control: Plot2D, a simple to use plotting control which uses
  matplotlib. Other similar new plotting controls will be added in the future,
  eventually removing our dependence on pyQwt which is no longer being updated.
  This plotting control is actually fairly well documented in the docs.

* Fixed bug in NumBox scientific notation that often made small values get
  rounded to zero when set.

* Fixed long-standing bug that caused vi backends processes to continue
  unterminated if the vi was closed using the close box on its tab instead
  of File -> Close.

* Fixed bug in ImageButton where setting the value from Python code did not
  update the image on the button. E.g., now image_button.value = True will
  change the button state and update the image.


VERSION 0.3.8:
--------------

* Lists passed as html parameters now need to evaluate properly as Python
  expressions. These are used in 'ChoiceBox', 'ChoiceButton', and
  'RadioButtonBox' controls. If you need to use quotes inside the expression,
  use double and single quotes, e.g.:
  the old way to pass a list was:
    <param name='choices' value='[zero, one, two, three, four]'/>
  while the new way is:
    <param name='choices' value="['zero', 'one', 'two', 'three', 'four']"/>

* Changes to MPLPlot control:
  - imshow method now allows updates, and imshow_with updates has been
    deprecated.
  - update_image_data has been renamed update_imshow_data.
  - New methods pcolor and update_pcolor_data analogous to imshow and
    update_imshow_data, but in polar coordinates.
  - Added method colorbar to add a color scale indicator to image plots.

* 'NumBox' controls can now work with scientific notation, e.g. 3.4e-12. Set
  the html parameter 'notation' to 'scientific' and change 'format_str' html
  parameter if different formatting is desired.

* Added 'get_directory' method to FileDialog to ask user to choose a directory
  instead of a file, and changed names of 'open' and 'save' methods of
  FileDialog to 'get_open' and 'get_save'.

* Added keyboard shortcut 'Ctrl+R' for File -> Reload.

* 'save' html parameter is now accessible from the Python side as a property.

* Added new html parameter 'user' to all controls that can be set to an
  arbitrary Python expression, then read as a control property. Note that it
  must be a string in html and must not raise an exception when passed to
  eval(). If you need to use quotes inside the expression, use double and
  single quotes, e.g.: <param name='user' value="{'key1':1, 'key2':2}"/> is ok.
  This is useful for tagging controls with information you may want to access
  from the Python side.


VERSION 0.3.7:
--------------
* Added confirmation dialog boxes to menu close, menu reload, and close boxes.

* Added 'auto_update' parameter to TextIOBox control. If set to True, the
  display is automatically updated after any change to the text (default value
  is True).

* The PointPlot control has been renamed to PointLinePlot.

* Added more html parameters to Plot and PointLinePlot. All options previously
  available only as set_plot_properties() arguments can now be used as html
  parameters.

* Added draw_points and draw_lines methods to PointLinePlot to draw a collection
  of points or lines in one call. Added change_point_data, change_points_data,
  change_line_data, change_points_data, change_point_properties,
  change_line_properties, delete_points, delete_lines methods to manipulate
  plotted curves (which have to be named with the key argument).

* New control, Shell, which is a Python console which can be embedded as a
  standard control in your vi. The console itself actually runs in the backend
  (action) process, and can be given access to all the variable and objects
  in your backend process.

* TextIOBox control will now scroll to the bottom if reverse is not set to True
  to keep the newest information showing when used as a log.


VERSION 0.3.6:
--------------

* GlobalTrigger controls now have an 'action_id' parameter which must match the
  GlobaAction 'id' instead of matching their id attributes.

* Fixed Chart control grids so default is back to no grid, and fixed potential
  problem with grids and multiple calls to set_plot_properties.

* Added x_grid, y_grid, dashed_grid to set_plot_properties options in Plot and
  PointPlot.

* Added grid test cases to Plot, Chart, and PointPlot in demo.

* Manually tweaked sizing of Button with toggle to match size of regular button.

* Added 'label' parameter to more controls that just printed some text:
  FileDialog and MessageDialog.

* Made label-only widgets totally invisible if label is the empty string.


VERSION 0.3.3:
--------------

* Added 'require_retrigger', and 'retrigger_timeout' keyword arguments to
  Timer.start(). If require_retrigger=True, then you must call Timer.retrigger()
  before the Timer will call your action again. This is to ensure that your
  action process does not fall behind the Timer action requests. If you do not
  call Timer.retrigger(), the Timer will retrigger after time retrigger_timeout,
  which defaults to None (never retrigger). You can check if the Timer was
  ever actually waiting for a retrigger with the new Timer.delayed attribute. It
  will be True if the Timer had to wait for a retrigger, and False otherwise.

* Limited the number of pending GUI calls that any action process can queue
  to 2. Any further calls will wait to return until queue space is freed up.
  This eliminates one way pythics could get stuck if many more GUI requests were
  made then could be processed. GUI calls can no longer be passed the
  keyword argument 'asynchronous', as the default behavior should now always
  be reasonable.

* Added 'rowspan' option to html table layout (contributed by Ilana Gat).

* Added 'y_grid', 'x_grid', and 'dashed_grid' properties to Chart control
  (contributed by Ilana Gat).

* Fixed bug in proxy _getattr methods.

* Added 'severity' html parameter and property to MessageDialog control which
  changes the icon shown in the message box (with help from Ilana Gat).

* Added 'message' property to MessageDialog control so the displayed message
  can be changed in python code.

* Added 'directory' option to FilePicker control 'type' parameter to choose
  a directory (with help from Ilana Gat).

* Added 'label' parameter to controls that just printed some text:
  ScriptLoader, ParameterLoader, GlobalNamespace, GlobalAction, GlobalTrigger,
  and Timer.

* Fixed bug in workspace saving and wrong filename extension when opening
  a workspace.

* Fixed minor bug that reported and error when the last tab was closed because
  the main window title could not be updated

* imshow_with_updates and update_image_data in matplotlib to make fast updates
  of image plots practical.


VERSION 0.3.0:
--------------

* Fixed bug where window title was not updated when a tab was selected.

* Fixed toggle button sizing bug.

* NumBox no longer triggers value changed action until enter button is pressed
  or it loses focus.

* Now possible to dynamically update choices in ChoiceBox.

* Fixed bug in Gauge range set method.

* Minor change in html.py so width of controls in % can be floats.

* Removed old wx import from libinstruments.py.

* Some new and updated instrument drivers.

* new control: PointPlot, ultra-simple plotting of xy pairs.

* new control: Plot, faster plotting of general data.


VERSION 0.2.0:
--------------

* This release is port of pythics to the pyqt toolkit. I also took the
  opportunity to clean up a lot of the API, so there are too many changes to
  list here, including many incompatibilities. This version may still be missing
  some functionality, so you may want to stick with 0.1.0 if you have problems.
  In particular, the new 'Chart' control is functional but 'Plot' is not.
  'MPLPlot' has not been affected. I anticipate that only this pyqt version of
  pythics will be maintained in the future, and hopefully this version will be
  a solid base to build on. I do not expect many more major incompatibilities
  on this scale in future versions.

* There is finally some useful documentation included with pythics, built using
  Sphinx. There is still a lot a writing to do, but the autodoc-generated API
  is already quite useful. See README.txt for more information.


VERSION 0.1.0:
--------------

* Pythics can now be installed with Distutils, thanks to a contribution from
  Alex Arsenovic. In recognition of having a real installer, the Pythics
  version naming has been changed.

* Refactoring in app.py and process.py to simplify Main class.

* Layout fix for headings and tables so they are automatically on their own
  line.

* New controls: GlobalAction and GlobalTrigger controls to allow triggering
  an action in one vi from a second vi. Combined with GlobalNamespace, full
  communication between vi's is now possible (see demo).


VERSION 2010-01-12:
-------------------

* Fixed bug where empty table cells or other elements could cause XML parsing
  errors.

* Added new control: TextIOBox, a read-only text box with a file-like
  interface, which is great for displaying output of a logger (see demo).

* Changed alignment of objects in layout to always be bottom aligned, more
  consistent with versions of pythics previous to 2010-01-08.

* Set default logging level to INFO, so pythics spews out far less messages.


VERSION 2010-01-08:
-------------------

* Rewrite of html.py (html layout engine).
  Some CSS behavior has now changed, but the system should be much more robust.
  See documentation for details.

* The 'key' parameter for objects in html files is now deprecated.
  The 'id' object attribute should now always be used instead.

* Major changes in FloatSpin to eliminate long-standing layout problems.

* Documentation improvements.

* Minor changes to the demo and examples to match layout engine changes.


VERSION 1.0 (FUTURE RELEASE PLANS):
-----------------------------------

* TO DO: all control html parameters should be available as class properties
  when possible. All control class properties should be available as html
  properties when practical. Exception: Timer control properties should be set
  in start method to avoid thread problems.

* TO DO: spreadsheet control.

* TO DO: Plot2D: add error bars, histograms, more...

* TO DO: New Plot3D control?

* TO DO: Documentation
  - Improve getting started tutorial.
  - Plotting tutorial
  - Improve description of internal function of Pythics.
